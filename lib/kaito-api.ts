// lib/kaito-api.ts
import type { Project, RankingEntry, GroupedRanking } from '../types';

interface ScraperOptions {
  username: string;
  projects: string[];
  timeframe?: '7D' | '30D' | '3M';
}

interface ScraperResult {
  user: { username: string; found: boolean };
  rankings: GroupedRanking[];
  stats: {
    total_projects: number;
    best_rank: number | null;
    avg_mindshare: number;
  };
}

export class KaitoScraper {
  private baseUrl = 'https://yaps.kaito.ai';
  private cache = new Map<string, any>();

  /**
   * –í–ê–ñ–ù–û: –≠—Ç–æ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –ø–∞—Ä—Å–µ—Ä, —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ Next.js API routes
   * –ù–µ–ª—å–∑—è –≤—ã–∑—ã–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞
   */

  private getCached(key: string): any {
    const entry = this.cache.get(key);
    if (!entry || Date.now() - entry.ts > 30 * 60 * 1000) return null;
    return entry.data;
  }

  private setCache(key: string, data: any): void {
    this.cache.set(key, { data, ts: Date.now() });
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π leaderboard –ø—Ä–æ–µ–∫—Ç–∞
   */
  private async scrapeProjectLeaderboard(
    projectSlug: string,
    timeframe: string = '30D'
  ): Promise<any[]> {
    const cacheKey = `leaderboard:${projectSlug}:${timeframe}`;
    const cached = this.getCached(cacheKey);
    if (cached) return cached;

    try {
      // URL leaderboard'–∞ –ø—Ä–æ–µ–∫—Ç–∞
      const url = `${this.baseUrl}/yapper-leaderboards/${projectSlug}`;
      
      console.log(`üì° Fetching: ${url}`);

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ fetch
      // Kaito –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Server-Side Rendering, –ø–æ—ç—Ç–æ–º—É HTML —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ
      const response = await fetch(url, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
          'Accept': 'text/html,application/xhtml+xml,application/xml',
          'Accept-Language': 'en-US,en;q=0.9',
        },
      });

      if (!response.ok) {
        console.log(`‚ùå ${projectSlug}: ${response.status}`);
        return [];
      }

      const html = await response.text();

      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –¥–∞–Ω–Ω—ã–µ –≤ HTML
      // Kaito –æ–±—ã—á–Ω–æ –∏–Ω–∂–µ–∫—Ç–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ <script id="__NEXT_DATA__">
      const nextDataMatch = html.match(/<script id="__NEXT_DATA__" type="application\/json">(.*?)<\/script>/);
      
      if (nextDataMatch) {
        try {
          const jsonData = JSON.parse(nextDataMatch[1]);
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º leaderboard –¥–∞–Ω–Ω—ã–µ –∏–∑ Next.js pageProps
          const leaderboardData = jsonData?.props?.pageProps?.leaderboard || [];
          
          this.setCache(cacheKey, leaderboardData);
          return leaderboardData;
        } catch (e) {
          console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –¥–ª—è ${projectSlug}`);
        }
      }

      return [];
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–µ ${projectSlug}:`, error);
      return [];
    }
  }

  /**
   * –ò—â–µ—Ç —é–∑–µ—Ä–∞ –≤ leaderboard –¥–∞–Ω–Ω—ã—Ö
   */
  private findUserInLeaderboard(
    leaderboardData: any[],
    username: string
  ): { rank: number; mindshare: number } | null {
    const normalizedUsername = username.toLowerCase().replace(/^@/, '');

    for (let i = 0; i < leaderboardData.length; i++) {
      const entry = leaderboardData[i];
      const entryUsername = (entry.username || entry.handle || '').toLowerCase().replace(/^@/, '');

      if (entryUsername === normalizedUsername) {
        return {
          rank: entry.rank || i + 1,
          mindshare: entry.mindshare || entry.score || 0,
        };
      }
    }

    return null;
  }

  /**
   * –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –ò—â–µ—Ç —é–∑–µ—Ä–∞ –ø–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º
   */
  public async search(options: ScraperOptions): Promise<ScraperResult> {
    const { username, projects, timeframe = '30D' } = options;

    console.log(`üîç –ò—â–µ–º @${username} –≤ ${projects.length} –ø—Ä–æ–µ–∫—Ç–∞—Ö...`);

    const rankings: GroupedRanking[] = [];

    // –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∏—Ö slug'–æ–≤ –Ω–∞ Kaito
    const projectSlugs: Record<string, string> = {
      // Pre-TGE
      'BABYLON': 'babylon',
      'BERACHAIN': 'berachain',
      'BERA': 'berachain',
      'SCROLL': 'scroll',
      'LINEA': 'linea',
      'MONAD': 'monad',
      'INITIA': 'initia',
      'STORY': 'story-protocol',
      'FUEL': 'fuel',
      
      // Post-TGE
      'BTC': 'bitcoin',
      'ETH': 'ethereum',
      'SOL': 'solana',
      'ARB': 'arbitrum',
      'OP': 'optimism',
      'POL': 'polygon',
      'MATIC': 'polygon',
      'AVAX': 'avalanche',
      'SUI': 'sui',
      'APT': 'aptos',
      'BASE': 'base',
    };

    // –ò—â–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
    for (const ticker of projects) {
      const slug = projectSlugs[ticker.toUpperCase()];

      if (!slug) {
        console.log(`‚ö†Ô∏è  –ù–µ—Ç slug –¥–ª—è ${ticker}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        continue;
      }

      try {
        // –ü–∞—Ä—Å–∏–º leaderboard
        const leaderboardData = await this.scrapeProjectLeaderboard(slug, timeframe);

        if (leaderboardData.length === 0) {
          console.log(`‚ö†Ô∏è  ${ticker}: leaderboard –ø—É—Å—Ç–æ–π`);
          continue;
        }

        // –ò—â–µ–º —é–∑–µ—Ä–∞
        const userEntry = this.findUserInLeaderboard(leaderboardData, username);

        if (userEntry) {
          console.log(`‚úÖ ${ticker}: Rank #${userEntry.rank}, Mindshare ${userEntry.mindshare}%`);

          rankings.push({
            project: ticker,
            ticker: ticker,
            imgUrl: '',
            timeframes: [
              {
                duration: timeframe,
                rank: userEntry.rank,
                mindshare: userEntry.mindshare,
              },
            ],
          });
        } else {
          console.log(`‚ùå ${ticker}: —é–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–ø-100`);
        }

        // Rate limiting: –∂–¥–µ–º 300ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(r => setTimeout(r, 300));
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ ${ticker}:`, error);
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–Ω–≥—É
    rankings.sort((a, b) => {
      const rankA = Math.min(...a.timeframes.map(t => t.rank));
      const rankB = Math.min(...b.timeframes.map(t => t.rank));
      return rankA - rankB;
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const allRanks = rankings.flatMap(r => r.timeframes.map(t => t.rank));
    const allMS = rankings.flatMap(r => r.timeframes.map(t => t.mindshare));

    return {
      user: {
        username,
        found: rankings.length > 0,
      },
      rankings,
      stats: {
        total_projects: rankings.length,
        best_rank: allRanks.length ? Math.min(...allRanks) : null,
        avg_mindshare: allMS.length ? allMS.reduce((a, b) => a + b, 0) / allMS.length : 0,
      },
    };
  }
}

/**
 * –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ú–ï–¢–û–î: –ò—Å–ø–æ–ª—å–∑—É–µ–º Puppeteer –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞
 * –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –µ—Å–ª–∏ –Ω—É–∂–µ–Ω headless browser
 */

/*
import puppeteer from 'puppeteer';

export class KaitoScraperWithPuppeteer {
  private browser: any = null;

  async init() {
    if (!this.browser) {
      this.browser = await puppeteer.launch({
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox'],
      });
    }
  }

  async scrapeProjectLeaderboard(projectSlug: string) {
    await this.init();
    
    const page = await this.browser.newPage();
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º debugger
    await page.evaluateOnNewDocument(() => {
      Object.defineProperty(window, 'debugger', {
        get: function() {},
        set: function() {}
      });
    });

    const url = `https://yaps.kaito.ai/yapper-leaderboards/${projectSlug}`;
    await page.goto(url, { waitUntil: 'networkidle0' });

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ leaderboard
    await page.waitForSelector('.leaderboard-table', { timeout: 10000 });

    // –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É
    const leaderboardData = await page.evaluate(() => {
      const rows = Array.from(document.querySelectorAll('.leaderboard-row'));
      return rows.map((row, index) => ({
        rank: index + 1,
        username: row.querySelector('.username')?.textContent || '',
        mindshare: parseFloat(row.querySelector('.mindshare')?.textContent || '0'),
      }));
    });

    await page.close();
    return leaderboardData;
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
    }
  }
}
*/
